services:
  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: log430-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: log430-grafana
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: log430-node-exporter
    ports:
      - "9100:9100"
    command:
      - "--web.listen-address=0.0.0.0:9100"
    networks:
      - monitoring

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: log430-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/log430_store?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - monitoring

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: log430-redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis:6379"
    depends_on:
      - redis
    networks:
      - monitoring

  # Shared Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: log430_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default
      - monitoring

  # Shared Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default
      - monitoring

  # MongoDB for Event Store
  mongodb:
    image: mongo:6
    container_name: log430-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: eventstore
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - default
      - monitoring

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: log430-rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - default
      - monitoring

  # Kong API Gateway
  kong:
    image: kong:latest
    ports:
      - "8000:8000" # Public API
      - "8443:8443" # Public API (SSL)
      - "8001:8001" # Admin API
      - "8444:8444" # Admin API (SSL)
    volumes:
      - ./api-gateway/kong/kong.yml:/etc/kong/kong.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_LOG_LEVEL: "info"
    depends_on:
      - rabbitmq-setup
      - user-service
      - catalog-service
      - transaction-service
      - complaint-service
      - audit-service
      - notification-service
      - saga-orchestrator-service
      - event-store-service
    networks:
      - default
      - monitoring

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-secret-key-change-in-production
      SERVICE_NAME: user-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  catalog-service:
    build:
      context: .
      dockerfile: ./services/catalog-service/Dockerfile
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: catalog-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  transaction-service:
    build:
      context: .
      dockerfile: ./services/transaction-service/Dockerfile
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: transaction-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  event-store-service:
    build:
      context: .
      dockerfile: ./services/event-store-service/Dockerfile
    ports:
      - "3008:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/eventstore?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      SERVICE_NAME: event-store-service
      EVENT_BATCH_SIZE: 100
      SNAPSHOT_FREQUENCY: 50
      REPLAY_TIMEOUT: 300000
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  complaint-service:
    build:
      context: .
      dockerfile: ./services/complaint-service/Dockerfile
    ports:
      - "3005:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/eventstore?authSource=admin
      SERVICE_NAME: complaint-service
      CORRELATION_ID_HEADER: x-correlation-id
      SAGA_TIMEOUT: 300000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq-setup:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  audit-service:
    build:
      context: .
      dockerfile: ./services/audit-service/Dockerfile
    ports:
      - "3007:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      SERVICE_NAME: audit-service
      AUDIT_RETENTION_DAYS: 365
      EXPORT_MAX_RECORDS: 10000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      rabbitmq-setup:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    ports:
      - "3006:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: notification-service
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: ${SMTP_USER:-notifications@example.com}
      SMTP_PASS: ${SMTP_PASS:-your-smtp-password}
      EMAIL_FROM: noreply@company.com
      EMAIL_TEMPLATES_PATH: /app/templates
      RETRY_MAX_ATTEMPTS: 3
      RETRY_DELAY: 5000
    volumes:
      - ./services/notification-service/templates:/app/templates:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq-setup:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  saga-orchestrator-service:
    build:
      context: .
      dockerfile: ./services/saga-orchestrator-service/Dockerfile
    ports:
      - "3009:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      SERVICE_NAME: saga-orchestrator-service
      USER_SERVICE_URL: http://user-service:3000
      CATALOG_SERVICE_URL: http://catalog-service:3000
      TRANSACTION_SERVICE_URL: http://transaction-service:3000
      SAGA_TIMEOUT: 300000
      CORRELATION_ID_HEADER: x-correlation-id
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      rabbitmq-setup:
        condition: service_completed_successfully
      user-service:
        condition: service_healthy
      catalog-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
      - monitoring

  # Database migration service
  db-migrate:
    build:
      context: .
      dockerfile: ./services/db-migrate/Dockerfile
    command: sh -c "ls -la && ls -la prisma/ && npx prisma migrate deploy"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
    volumes:
      - ./prisma:/app/prisma
    depends_on:
      postgres:
        condition: service_healthy

  # Database seeding service
  db-seed:
    build:
      context: .
      dockerfile: ./services/db-seeder/Dockerfile
    command: ["node", "seed.js"]
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - default

  # RabbitMQ setup service - Automatically creates queues and exchanges
  rabbitmq-setup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.rabbitmq-setup
    environment:
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - default
    restart: "no" # Run once and exit

  # Web client
  web-client:
    build:
      context: ./web-client
      args:
        - VITE_API_BASE_URL=http://kong:8000
        - VITE_API_KEY=frontend-app-key-12345
    ports:
      - "5173:80"
    depends_on:
      - kong
    profiles:
      - frontend

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
  monitoring:
    driver: bridge
